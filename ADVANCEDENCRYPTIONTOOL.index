pip install cryptography tk

import os
import base64
import tkinter as tk
from tkinter import filedialog, messagebox
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.primitives.kdf.scrypt import Scrypt
from cryptography.hazmat.primitives.kdf.hkdf import HKDF
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import constant_time
from cryptography.hazmat.backends import default_backend
import os

# ===== Helper Functions =====

def derive_key(password: str, salt: bytes) -> bytes:
    """Derive a secure 256-bit key using PBKDF2."""
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,  # AES-256 key size
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    return kdf.derive(password.encode())

def encrypt_file(filepath: str, password: str):
    """Encrypt a file using AES-256."""
    try:
        with open(filepath, "rb") as f:
            plaintext = f.read()

        # Generate random salt and IV
        salt = os.urandom(16)
        iv = os.urandom(16)

        key = derive_key(password, salt)

        # Padding plaintext to block size (16 bytes)
        padder = padding.PKCS7(128).padder()
        padded_plaintext = padder.update(plaintext) + padder.finalize()

        cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
        encryptor = cipher.encryptor()
        ciphertext = encryptor.update(padded_plaintext) + encryptor.finalize()

        # Store salt + iv + ciphertext in output
        encrypted_data = salt + iv + ciphertext
        enc_file = filepath + ".enc"

        with open(enc_file, "wb") as f:
            f.write(encrypted_data)

        messagebox.showinfo("Success", f"File Encrypted Successfully!\nSaved as: {enc_file}")
    except Exception as e:
        messagebox.showerror("Error", str(e))

def decrypt_file(filepath: str, password: str):
    """Decrypt a previously encrypted file."""
    try:
        with open(filepath, "rb") as f:
            data = f.read()

        salt = data[:16]
        iv = data[16:32]
        ciphertext = data[32:]

        key = derive_key(password, salt)

        cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
        decryptor = cipher.decryptor()
        padded_plaintext = decryptor.update(ciphertext) + decryptor.finalize()

        # Unpad plaintext
        unpadder = padding.PKCS7(128).unpadder()
        plaintext = unpadder.update(padded_plaintext) + unpadder.finalize()

        dec_file = filepath.replace(".enc", "_decrypted")

        with open(dec_file, "wb") as f:
            f.write(plaintext)

        messagebox.showinfo("Success", f"File Decrypted Successfully!\nSaved as: {dec_file}")
    except Exception as e:
        messagebox.showerror("Error", str(e))

# ===== GUI Application =====

def select_file_encrypt():
    file_path = filedialog.askopenfilename()
    if file_path:
        password = password_entry.get()
        if not password:
            messagebox.showerror("Error", "Please enter a password!")
            return
        encrypt_file(file_path, password)

def select_file_decrypt():
    file_path = filedialog.askopenfilename()
    if file_path:
        password = password_entry.get()
        if not password:
            messagebox.showerror("Error", "Please enter a password!")
            return
        decrypt_file(file_path, password)

# ===== Tkinter GUI =====
root = tk.Tk()
root.title("üîê Advanced AES-256 Encryption Tool")
root.geometry("400x200")

tk.Label(root, text="Enter Password:", font=("Arial", 12)).pack(pady=5)
password_entry = tk.Entry(root, show="*", width=30)
password_entry.pack(pady=5)

tk.Button(root, text="üîí Encrypt File", command=select_file_encrypt, width=20, bg="lightblue").pack(pady=10)
tk.Button(root, text="üîì Decrypt File", command=select_file_decrypt, width=20, bg="lightgreen").pack(pady=5)

root.mainloop()
